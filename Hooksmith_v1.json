{
  "name": "Hooksmith_v1 (Flavor Dave)",
  "nodes": [
    {"parameters": {}, "id": "ManualTrigger", "name": "Manual Trigger", "type": "n8n-nodes-base.manualTrigger", "typeVersion": 1, "position": [240, 240]},
    {
      "parameters": {
        "options": {},
        "assignments": {"mode": "defineBelow","assignments": [
          {"name": "post_type", "value": "R4"},
          {"name": "brief", "value": "funny AI manager skit about burnout"},
          {"name": "config_url", "value": "https://drive.google.com/uc?export=download&id=1ATsFNiq8qOpcYHNzE0jhTqgCm_R7qOzg"}
        ]}
      },
      "id": "SetInput",
      "name": "Set Input",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3,
      "position": [460, 240]
    },
    {
      "parameters": {
        "options": {"redirect": {"followRedirects": true}},
        "url": "={{$json[\"config_url\"]}}",
        "responseFormat": "json"
      },
      "id": "ReadConfig",
      "name": "HTTP Request - Read Config",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [680, 300]
    },
    {
      "parameters": {"mode": "passThrough", "output": "input1"},
      "id": "MergeInputs",
      "name": "Merge (Pass-through)",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [900, 260]
    },
    {
      "parameters": {
        "functionCode": "// We now have a merged item: Input1 (Set Input) + Input2 (HTTP JSON under 'json')\nconst in1 = $input.first().json;               // from Set Input\nconst cfg  = $input.itemMatching(1).json;      // from HTTP Request (second input)\n\nconst pt = in1.post_type || 'R4';\nconst prefix = pt.slice(0,1).toUpperCase();\nconst archeNum = pt.slice(1);\n\nconst arche = cfg.archetypes[archeNum];\nif (!arche) throw new Error(`Unknown archetype: ${archeNum}`);\nconst format = cfg.formats[prefix];\nif (!format) throw new Error(`Unknown format prefix: ${prefix}`);\n\nreturn [{\n  json: {\n    post_type: pt,\n    brief: in1.brief || '',\n    brand: cfg.brand,\n    format: { id: prefix, ...format },\n    archetype: { id: archeNum, ...arche },\n    rules: cfg.rules || {},\n    notation: cfg.notation || {}\n  }\n}];"
      },
      "id": "PreparePromptData",
      "name": "Prepare Prompt Data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [1120, 260]
    },
    {
      "parameters": {
        "model": "gpt-4o",
        "temperature": 0.7,
        "messages": [
          {
            "text": "You are Hooksmith, the Flavor Dave idea generator.\nFollow the Flavor Dave voice and rules from the provided JSON.\nVoice: dry, clever, emotionally indirect; humor via misinterpretation.\nHooks must be ≤ 5 words, visually evocative, no hashtags, no generic marketing.\n\nInputs:\nBRAND_VOICE: {{$json.brand.voice}}\nTONE_RULES: {{JSON.stringify($json.brand.tone_rules || [])}}\nFORMAT: {{$json.format.name}} ({{$json.format.id}})\nARCHETYPE: {{$json.archetype.name}} (#{{$json.archetype.id}})\nARCHETYPE_TONE: {{$json.archetype.tone || ''}}\nARCHETYPE_CTA: {{$json.archetype.cta || 'none'}}\nBRIEF: {{$json.brief}}\n\nTask: Generate 10 hook options tailored to the archetype/format + brief.\nEach item must be JSON with keys: text (string, ≤5 words), flavor_score (0-1 float).\nReturn a JSON array only.",
            "type": "system"
          }
        ]
      },
      "id": "OpenAIChat",
      "name": "OpenAI (Chat) - Hooksmith",
      "type": "n8n-nodes-base.openAiChat",
      "typeVersion": 1,
      "position": [1340, 260],
      "credentials": {"openAiApi": {"id": "OPENAI_CREDENTIAL_ID", "name": "OpenAI Account"}}
    },
    {
      "parameters": {
        "functionCode": "// Parse LLM JSON output\nlet raw = $json.data || $json.text || $json.choices?.[0]?.message?.content || '';\ntry {\n  if (typeof raw === 'string') raw = raw.trim();\n  const arr = typeof raw === 'string' ? JSON.parse(raw) : raw;\n  if (!Array.isArray(arr)) throw new Error('Not an array');\n  return arr.map((o, i) => ({ json: { index: i+1, text: o.text, flavor_score: o.flavor_score } }));\n} catch (e) {\n  return [{ json: { error: 'Failed to parse model output', raw } }];\n}"
      },
      "id": "ParseLLM",
      "name": "Parse LLM JSON",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [1560, 260]
    }
  ],
  "connections": {
    "Manual Trigger": {"main": [[{ "node": "Set Input", "type": "main", "index": 0 }]]},
    "Set Input": {
      "main": [
        [{ "node": "HTTP Request - Read Config", "type": "main", "index": 0 }],
        [{ "node": "Merge (Pass-through)", "type": "main", "index": 0 }]
      ]
    },
    "HTTP Request - Read Config": {
      "main": [
        [{ "node": "Merge (Pass-through)", "type": "main", "index": 1 }]
      ]
    },
    "Merge (Pass-through)": {"main": [[{ "node": "Prepare Prompt Data", "type": "main", "index": 0 }]]},
    "Prepare Prompt Data": {"main": [[{ "node": "OpenAI (Chat) - Hooksmith", "type": "main", "index": 0 }]]},
    "OpenAI (Chat) - Hooksmith": {"main": [[{ "node": "Parse LLM JSON", "type": "main", "index": 0 }]]}
  }
}
